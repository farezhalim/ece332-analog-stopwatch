
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fe  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f2  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c8  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000431  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018c  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 94 00 	call	0x128	; 0x128 <main>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
volatile uint8_t stepnumber = 0;
volatile uint8_t steps = 0;

typedef enum {STATE_READY_FOR_PRESS, STATE_WAITING_FOR_RELEASE, STATE_DEBOUNCING_PRESS, STATE_DEBOUNCING_RELEASE} state_t1;

ISR(TIMER1_COMPA_vect, ISR_BLOCK){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	TCCR0B = 0;
  a2:	15 bc       	out	0x25, r1	; 37
	OCR1A += 11718;
  a4:	e8 e8       	ldi	r30, 0x88	; 136
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	91 81       	ldd	r25, Z+1	; 0x01
  ac:	8a 53       	subi	r24, 0x3A	; 58
  ae:	92 4d       	sbci	r25, 0xD2	; 210
  b0:	91 83       	std	Z+1, r25	; 0x01
  b2:	80 83       	st	Z, r24
	
	
	switch (stepnumber) {
  b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stepnumber>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	61 f0       	breq	.+24     	; 0xd4 <__vector_11+0x44>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <__vector_11+0x34>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	31 f0       	breq	.+12     	; 0xce <__vector_11+0x3e>
  c2:	12 c0       	rjmp	.+36     	; 0xe8 <__vector_11+0x58>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	49 f0       	breq	.+18     	; 0xda <__vector_11+0x4a>
  c8:	84 30       	cpi	r24, 0x04	; 4
  ca:	51 f0       	breq	.+20     	; 0xe0 <__vector_11+0x50>
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <__vector_11+0x58>
		case 1 : {
			PORTC = 0b00000010;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	88 b9       	out	0x08, r24	; 8
			break;
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <__vector_11+0x58>
		}
		case 2 : {
			PORTC = 0b00001000;
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	88 b9       	out	0x08, r24	; 8
			break;
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <__vector_11+0x58>
		}
		case 3 : {
			PORTC = 0b00000001;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	88 b9       	out	0x08, r24	; 8
			break;
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__vector_11+0x58>
		}
		case 4 : {
			PORTC = 0b00000100;
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	88 b9       	out	0x08, r24	; 8
			stepnumber = 0;
  e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <stepnumber>
			break;
		}
	}
	
	if (steps == 200) {
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ec:	88 3c       	cpi	r24, 0xC8	; 200
  ee:	29 f4       	brne	.+10     	; 0xfa <__vector_11+0x6a>
		// play buzzer
		TCCR0B |= (1 << CS01) | (1 << CS00);
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	85 bd       	out	0x25, r24	; 37
		steps = 0;
  f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	
	stepnumber++;
  fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stepnumber>
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <stepnumber>
	steps++;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <button_pressed>:

uint8_t button_pressed() {
	return !(PIND & 0x01);
 120:	89 b1       	in	r24, 0x09	; 9
 122:	80 95       	com	r24
}
 124:	81 70       	andi	r24, 0x01	; 1
 126:	08 95       	ret

00000128 <main>:

int main(void)
{
	DDRC = 0x0F;            // initialize port C to outputs
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	87 b9       	out	0x07, r24	; 7
	//PORTC = 0b00000100;
	// motors connected across PC0...Pc3
	
	uint8_t running = 0;
	
	PORTD |= (1 << PD0); // enable pull up resistor
 12c:	58 9a       	sbi	0x0b, 0	; 11
	DDRD &= ~(1 << PD0); // set button as input
 12e:	50 98       	cbi	0x0a, 0	; 10
	state_t1 button_state = STATE_READY_FOR_PRESS;
	
	TIMSK1 |= 0x02;
 130:	ef e6       	ldi	r30, 0x6F	; 111
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	82 60       	ori	r24, 0x02	; 2
 138:	80 83       	st	Z, r24
	sei();
 13a:	78 94       	sei
	OCR1A = 11718;
 13c:	86 ec       	ldi	r24, 0xC6	; 198
 13e:	9d e2       	ldi	r25, 0x2D	; 45
 140:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 144:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// 200 steps / minute
	
	// initalization of the timer that generates a 1kHz square wave for the buzzer
	// desired frequency is 1kHz. therefore, using a prescaler of 64, OCR0A must be set to 155
	// timer 0 is set to CTC mode, and to toggle on compare match
	DDRD |= (1 << PD6); // set OC0A pin as output
 148:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1 << WGM01) | (1 << COM0A0);
 14a:	84 b5       	in	r24, 0x24	; 36
 14c:	82 64       	ori	r24, 0x42	; 66
 14e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 155;
 150:	8b e9       	ldi	r24, 0x9B	; 155
 152:	87 bd       	out	0x27, r24	; 39
	
	uint8_t running = 0;
	
	PORTD |= (1 << PD0); // enable pull up resistor
	DDRD &= ~(1 << PD0); // set button as input
	state_t1 button_state = STATE_READY_FOR_PRESS;
 154:	c0 e0       	ldi	r28, 0x00	; 0
{
	DDRC = 0x0F;            // initialize port C to outputs
	//PORTC = 0b00000100;
	// motors connected across PC0...Pc3
	
	uint8_t running = 0;
 156:	d0 e0       	ldi	r29, 0x00	; 0
				
			}

			case STATE_WAITING_FOR_RELEASE : {
				if (!button_pressed()) {
					button_state = STATE_DEBOUNCING_RELEASE;
 158:	0f 2e       	mov	r0, r31
 15a:	f3 e0       	ldi	r31, 0x03	; 3
 15c:	6f 2e       	mov	r6, r31
 15e:	f0 2d       	mov	r31, r0
		
	while(1) {
		switch (button_state) {
			case STATE_READY_FOR_PRESS : {
				if (button_pressed()) {
					button_state = STATE_DEBOUNCING_PRESS;
 160:	68 94       	set
 162:	77 24       	eor	r7, r7
 164:	71 f8       	bld	r7, 1
					running = 1;
				} else if (running == 1) {
					//stepnumber = 0;
					steps++;
					PORTC = 0;
					TCCR1B &= ~(1 << CS12);
 166:	01 e8       	ldi	r16, 0x81	; 129
 168:	10 e0       	ldi	r17, 0x00	; 0
					TCNT1 = 0;
 16a:	0f 2e       	mov	r0, r31
 16c:	f4 e8       	ldi	r31, 0x84	; 132
 16e:	af 2e       	mov	r10, r31
 170:	b1 2c       	mov	r11, r1
 172:	f0 2d       	mov	r31, r0
					OCR1A = 11718;
 174:	0f 2e       	mov	r0, r31
 176:	f8 e8       	ldi	r31, 0x88	; 136
 178:	cf 2e       	mov	r12, r31
 17a:	d1 2c       	mov	r13, r1
 17c:	f0 2d       	mov	r31, r0
 17e:	0f 2e       	mov	r0, r31
 180:	f6 ec       	ldi	r31, 0xC6	; 198
 182:	ef 2e       	mov	r14, r31
 184:	fd e2       	ldi	r31, 0x2D	; 45
 186:	ff 2e       	mov	r15, r31
 188:	f0 2d       	mov	r31, r0
				break;
			}

			case STATE_DEBOUNCING_PRESS : {
				_delay_ms(50);
				button_state = STATE_WAITING_FOR_RELEASE;
 18a:	99 24       	eor	r9, r9
 18c:	93 94       	inc	r9
					steps++;
					PORTC = 0;
					TCCR1B &= ~(1 << CS12);
					TCNT1 = 0;
					OCR1A = 11718;
					running = 0;
 18e:	81 2c       	mov	r8, r1
 190:	01 c0       	rjmp	.+2      	; 0x194 <main+0x6c>
				break;
			}

			case STATE_DEBOUNCING_PRESS : {
				_delay_ms(50);
				button_state = STATE_WAITING_FOR_RELEASE;
 192:	c9 2d       	mov	r28, r9
	DDRD |= (1 << PD6); // set OC0A pin as output
	TCCR0A |= (1 << WGM01) | (1 << COM0A0);
	OCR0A = 155;
		
	while(1) {
		switch (button_state) {
 194:	c1 30       	cpi	r28, 0x01	; 1
 196:	a9 f1       	breq	.+106    	; 0x202 <main+0xda>
 198:	28 f0       	brcs	.+10     	; 0x1a4 <main+0x7c>
 19a:	c2 30       	cpi	r28, 0x02	; 2
 19c:	49 f0       	breq	.+18     	; 0x1b0 <main+0x88>
 19e:	c3 30       	cpi	r28, 0x03	; 3
 1a0:	b1 f1       	breq	.+108    	; 0x20e <main+0xe6>
 1a2:	f8 cf       	rjmp	.-16     	; 0x194 <main+0x6c>
			case STATE_READY_FOR_PRESS : {
				if (button_pressed()) {
 1a4:	0e 94 90 00 	call	0x120	; 0x120 <button_pressed>
 1a8:	88 23       	and	r24, r24
 1aa:	a1 f3       	breq	.-24     	; 0x194 <main+0x6c>
					button_state = STATE_DEBOUNCING_PRESS;
 1ac:	c7 2d       	mov	r28, r7
 1ae:	f2 cf       	rjmp	.-28     	; 0x194 <main+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f e9       	ldi	r18, 0x9F	; 159
 1b2:	86 e8       	ldi	r24, 0x86	; 134
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x8e>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x98>
 1c0:	00 00       	nop
			}

			case STATE_DEBOUNCING_PRESS : {
				_delay_ms(50);
				button_state = STATE_WAITING_FOR_RELEASE;
				if (running == 0) {
 1c2:	d1 11       	cpse	r29, r1
 1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <main+0xb0>
					TCCR1B |= (1 << CS12);
 1c6:	f8 01       	movw	r30, r16
 1c8:	80 81       	ld	r24, Z
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	80 83       	st	Z, r24
					steps = 1;
 1ce:	90 92 00 01 	sts	0x0100, r9	; 0x800100 <_edata>
				break;
			}

			case STATE_DEBOUNCING_PRESS : {
				_delay_ms(50);
				button_state = STATE_WAITING_FOR_RELEASE;
 1d2:	c9 2d       	mov	r28, r9
				if (running == 0) {
					TCCR1B |= (1 << CS12);
					steps = 1;
					running = 1;
 1d4:	d9 2d       	mov	r29, r9
 1d6:	de cf       	rjmp	.-68     	; 0x194 <main+0x6c>
				} else if (running == 1) {
 1d8:	d1 30       	cpi	r29, 0x01	; 1
 1da:	d9 f6       	brne	.-74     	; 0x192 <main+0x6a>
					//stepnumber = 0;
					steps++;
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					PORTC = 0;
 1e6:	18 b8       	out	0x08, r1	; 8
					TCCR1B &= ~(1 << CS12);
 1e8:	f8 01       	movw	r30, r16
 1ea:	80 81       	ld	r24, Z
 1ec:	8b 7f       	andi	r24, 0xFB	; 251
 1ee:	80 83       	st	Z, r24
					TCNT1 = 0;
 1f0:	f5 01       	movw	r30, r10
 1f2:	11 82       	std	Z+1, r1	; 0x01
 1f4:	10 82       	st	Z, r1
					OCR1A = 11718;
 1f6:	f6 01       	movw	r30, r12
 1f8:	f1 82       	std	Z+1, r15	; 0x01
 1fa:	e0 82       	st	Z, r14
				break;
			}

			case STATE_DEBOUNCING_PRESS : {
				_delay_ms(50);
				button_state = STATE_WAITING_FOR_RELEASE;
 1fc:	c9 2d       	mov	r28, r9
					steps++;
					PORTC = 0;
					TCCR1B &= ~(1 << CS12);
					TCNT1 = 0;
					OCR1A = 11718;
					running = 0;
 1fe:	d8 2d       	mov	r29, r8
 200:	c9 cf       	rjmp	.-110    	; 0x194 <main+0x6c>
				break;
				
			}

			case STATE_WAITING_FOR_RELEASE : {
				if (!button_pressed()) {
 202:	0e 94 90 00 	call	0x120	; 0x120 <button_pressed>
 206:	81 11       	cpse	r24, r1
 208:	c5 cf       	rjmp	.-118    	; 0x194 <main+0x6c>
					button_state = STATE_DEBOUNCING_RELEASE;
 20a:	c6 2d       	mov	r28, r6
 20c:	c3 cf       	rjmp	.-122    	; 0x194 <main+0x6c>
 20e:	ff e9       	ldi	r31, 0x9F	; 159
 210:	26 e8       	ldi	r18, 0x86	; 134
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	f1 50       	subi	r31, 0x01	; 1
 216:	20 40       	sbci	r18, 0x00	; 0
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0xec>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0xf6>
 21e:	00 00       	nop
				break;
			}

			case STATE_DEBOUNCING_RELEASE : {
				_delay_ms(50);
				button_state = STATE_READY_FOR_PRESS;
 220:	c8 2d       	mov	r28, r8
				break;
 222:	b8 cf       	rjmp	.-144    	; 0x194 <main+0x6c>

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
